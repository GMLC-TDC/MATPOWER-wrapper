clc
clear all
clear classes
close all


case_data = read_json('../src/wrapper_config_v2.json');
casename = 'Base';
month = 'August 2021';
start_time = datetime(case_data.start_time);
end_time = datetime(case_data.end_time);
% start_time = datetime('2016-08-01');

model_file = strcat(case_data.matpower_most_data.datapath, case_data.matpower_most_data.case_name);
model_data = read_json(model_file);

figure
a=axes();
set(a,'Units','normalized');
case_file_LMP = strcat('../outputs/',casename,'_RTM_LMP.csv');
case_data_LMP = readmatrix(case_file_LMP);
time_data = start_time + seconds(case_data_LMP(:,1));
plot(time_data,case_data_LMP(:,2:end),'-','LineWidth',1.5)
legend({'Bus1','Bus2','Bus3', 'Bus4', 'Bus5', 'Bus6', 'Bus7', 'Bus8'});
ylabel(a,'LMP profile ($/MW)','FontSize',14);
set(gca, 'FontName', 'Times New Roman')
xlabel(a,'Time of Day (Hr)','FontSize',14)
set(gca, 'FontName', 'Times New Roman')
grid on 


%% Generation Mix Plotting


%% Month of August
input_file_name = strcat(case_data.matpower_most_data.datapath, '2021_Aug_ERCOT_Gen_Mix.csv');
gen_mix = readtable(input_file_name);
load_data_t = readtable(strcat('../outputs/',casename,'_RTM_PD.csv'));
total_load_t = sum(load_data_t{:, 2:end},2);

UTC_adjust
frm = find(gen_mix.Datetime == start_time + hours(5));
to = find(gen_mix.Datetime == end_time+ hours(5));

case_file_PG = strcat('../outputs/',casename,'_RTM_PG.csv');
case_data_PG = readtable(case_file_PG);


for i = 1:length(model_data.genfuel)
    genfuel{i,1} = model_data.genfuel{i};    
end

gen_mix_type = {'nuclear',    'coal',     'hydro',       'solar',  'ng', 'wind',};
newcolors =   [0.5 0.5 0.5; 0 0 0; 0.4940 0.1840 0.5560; 1 1 0; ; 1 .58 0; 0 0 1];
gen_idx = struct()
for type_idx = 1:length(gen_mix_type)
    type = gen_mix_type(type_idx);
    gen_idx.(type{1}) = find(strcmp(genfuel, type{1}));
end

gen_dispatch = array2table(zeros(height(case_data_PG), length(gen_mix_type)),'VariableNames', gen_mix_type);
for type_idx = 1:length(gen_mix_type)
    type = gen_mix_type(type_idx);
    gen_type_indexes = gen_idx.(type{1})+1; %% adding +1 for as the data is moved by +1 due to time 
    gen_dispatch.(type{1}) = sum(case_data_PG{:, gen_type_indexes}, 2);
    Legend{type_idx}=type{1};
end



y = [];
idx = 1;
for k = 1:height(case_data_PG)
    x = [gen_dispatch.nuclear(idx), gen_dispatch.coal(idx), gen_dispatch.hydro(idx) , gen_dispatch.solar(idx), gen_dispatch.ng(idx), ...
        gen_dispatch.wind(idx)];
    idx = idx + 1;
    y = [y; x];
end

figure,
subplot(2,1,1);
area(time_data, y, 'LineStyle', 'none')
colororder(newcolors)
hold on
plot(time_data, total_load_t, 'k.', 'LineWidth', 1.5);
set(gca, 'YTickLabel',get(gca,'YTick'))
lgnd = legend({'Nuclear', 'Coal', 'Hydro', 'Solar', 'Natural Gas', 'Wind', 'Total Load'});
xlabel('Time')
ylabel('Generation (MW)')
title('MATPOWER Simulation (Aug.)')
xlim([time_data(1), time_data(end)])
xticks(time_data(288:288*2:end))


y = [];
idx = frm+1;
for k = frm+5 : to
    x = [gen_mix.Nuclear(k), gen_mix.Coal(k), gen_mix.Hydro(k), gen_mix.Solar(k), ...
        gen_mix.Gas_CC(k)+gen_mix.Gas(k), gen_mix.Wind(k)];
    y = [y; 4*x];
end

subplot(2,1,2);
area(gen_mix.Datetime(frm: to-5), y, 'LineStyle', 'none');
colororder(newcolors)
hold on
plot(time_data, total_load_t, 'k.', 'LineWidth', 1.5);
set(gca, 'YTickLabel',get(gca,'YTick'))
lgnd = legend({'Nuclear', 'Coal', 'Hydro', 'Solar', 'Natural Gas', 'Wind', 'Total Load'});
xlabel('Time')
ylabel('Generation (MW)')
title('Actual ERCOT Dispatch (Aug.)')
xlim([time_data(1), time_data(end)])
xticks(time_data(288:288*2:end))

function val = read_json(file)
       fid = fopen(file); 
       raw = fread(fid,inf); 
       str = char(raw'); 
       fclose(fid); 
       val = jsondecode(str);
end 